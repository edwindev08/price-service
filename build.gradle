plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}
allprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'jacoco'
	apply plugin: 'application'

	mainClassName = 'com.edwindev08.price.PriceServiceApplication'

	group = 'com.edwindev08'
	version = '0.0.1-SNAPSHOT'

	java {
		sourceCompatibility = '17'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	ext {
		set('springBootVersion', "3.1.5")
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation "org.springframework.boot:spring-boot-starter-web"
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.apache.logging.log4j:log4j-api:2.21.1'
		implementation 'org.apache.logging.log4j:log4j-core:2.21.1'
		implementation 'com.h2database:h2:2.2.224'
		implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.3'

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
		testImplementation 'org.mockito:mockito-core:3.3.3'
//	testImplementation 'com.github.javafaker:javafaker:1.0.1'
		testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		}
	}

	test {
		useJUnitPlatform()

		testLogging {
			events "passed", "skipped", "failed"
		}
	}

	jacocoTestReport {
		executionData test
		reports {
			xml.required = true
			csv.required = false
		}
	}

	task view_paths {
		doLast { task ->
			println "$task.project.name"
			println "------------------"
			println "Main: $sourceSets.main.java.srcDirTrees"
			println "   Resources: $sourceSets.main.resources.srcDirTrees"
			println "Tests: $sourceSets.test.java.srcDirTrees"
			println "   Resources: $sourceSets.test.resources.srcDirTrees"
		}
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named("test") {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// All subprojects (located in src/*)
subprojects {
	group = "com.edwindev08.${rootProject.name}"

	sourceSets {
		main {
			java { srcDirs = ['main'] }
			resources { srcDirs = ['main/resources'] }
		}

		test {
			java { srcDirs = ['test'] }
			resources { srcDirs = ['test/resources'] }
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'

		testImplementation rootProject.sourceSets.main.output
		testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'

		if (project.name != "price") {
			implementation project(":price")
			testImplementation project(":price").sourceSets.test.output
		}
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

bootJar {
	archiveBaseName.set('price-service')
	archiveVersion.set('0.0.1')
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'

	implementation project(":price")

	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'
	testImplementation project(":price").sourceSets.test.output
}

